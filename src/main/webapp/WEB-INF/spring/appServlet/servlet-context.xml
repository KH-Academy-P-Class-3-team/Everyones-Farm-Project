<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 트랜잭션 어노테이션을 관리하는 태그 추가 -->
	<!-- 
		proxy-target-class="true"
		트랜잭션 관리를 위해서 aop가 활용되는데, 이때 프록시객체 생성을 위해 인터페이스가 필요하다.
		하지만 proxy-target-class 속성을 true로 지정하면 인터페이스가 없어도 프록시객체를 생성한다.
		상속을 활용하기 때문에, 타겟클래스(프록시 객체의 부모클래스)의 기본생성자가 두 번 호출되어
		예상치 못한 부작용이 생길 수 있다. 권장하지 않음	
	 -->
<!-- 	<tx:annotation-driven proxy-target-class="false" transaction-manager="transactionManager"/> -->
<!-- 	<beans:bean id="transactionManager"  -->
<!-- 		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!-- 		<beans:property name="dataSource" ref="dataSource"></beans:property> -->
<!-- 	</beans:bean> -->
	
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
			<!-- select로 시작하는 모든 메서드 -->
<!-- 			<tx:method name="select*"/> -->
			
			<!-- 직접 만든 CustomException의 경우 따로 rollback-for로 등록을 해줘야
				트랜잭션 처리가 가능해진다.
			 -->
<!-- 			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception, common.exception.CustomException"/> -->
<!-- 			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception, common.exception.CustomException"/> -->
<!-- 			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception, common.exception.CustomException"/> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
<!-- 	<aop:config> -->
 		<!-- 접근제한자(생략가능) 반환형(필수) 패키지(생략가능) 클래스명(생략가능) 메서드(매개변수) -->
<!-- 		<aop:pointcut  -->
<!-- 			expression="execution(* com.kh.welcome..*.*ServiceImpl.*(..))" 	id="requiredTx"/> -->
<!-- 		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx"/>	 -->
<!-- 	</aop:config> -->
	
<!-- 	<aop:aspectj-autoproxy/> -->
	
	<!-- advisor 추가 -->
<!-- 	<beans:bean name="logAop" class="common.aop.LogAop"></beans:bean> -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 인터셉터 등록 -->
<!-- 	<interceptors> -->
<!-- 		<interceptor> -->
 		<!-- 모든 요청이 인터셉터 거치도록 작성 -->
<!-- 		<mapping path="/**"/>	 -->
<!-- 		<beans:bean class="common.interceptor.AuthInterceptor"></beans:bean> -->
<!-- 		</interceptor> -->
<!-- 	</interceptors> -->
	
	<context:component-scan base-package="com.kh.farmapp" />
		<!-- ck 에디터 -->
	<resources location="/WEB-INF/views/ckeditor/" mapping="/ckeditor/**"></resources>
	
</beans:beans>
